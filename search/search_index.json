{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"orchestration framework","text":""},{"location":"#component","title":"Component","text":"config.yaml<pre><code>name: inventory-management\nversion: 1.0.0\nservices:\n  - name: inventory-management-ui\n    repo: ui-respository-url\n    # We can impose this type to be a specific framework (Say: react).\n    # This allows us to have a common frontend that fetches source code from\n    # the service repository at build time\n    type: ui\n  - name: inventory-management-api\n    repo: api-respository-url\n    # This should mean the service source code has a Dockerfile that exposes\n    # a service at $env:PORT and hosts an API at\n    # $env:SERVICE_BASE_URL/**\n    # and has documentation at\n    # $env:SERVICE_BASE_URL/docs\n    type: api\n  - name: inventory-management-barcode-sensor\n    repo: sensor-respository-url\n    # This means that this is a special type of service that is used to \n    # collect data from specific k8s nodes\n    # It should have a Dockerfile (can access host machine) that uploads\n    # collected data to data storage\n    type: agent\n    tagname: barcode-sensor-node\n  - name: inventory-management-db\n    repo: db-respository-url\n    # This means the folder has a Dockerfile that exposes a port\n    type: db\n</code></pre> <p>Action: tell the orchestrator to track this config (git, kubernetes, mdns)</p>"},{"location":"#orchestrator","title":"Orchestrator","text":"<p>Respond to Action: new config detected run <code>logic.sh</code></p> <pre><code>sequenceDiagram\n    Component-&gt;Orchestrator: {name}\n    Component-&gt;Orchestrator: {version}\n    loop services\n        Component--&gt;Orchestrator: {service.name}\n        Component--&gt;Orchestrator: {service.repo}\n        Component--&gt;UI_BUILD: {service.type}\n        Component--&gt;API_BUILD: {service.type}\n        Component--&gt;AGENT_BUILD: {service.type}\n    end</code></pre> logic.sh<pre><code>Get source code\n\nCreate a k8s namespace (given: {name}, {version})\n\nfor each service in {services}\n\nif service is 'ui'\nadd {service.repo} to the common frontend build\n\nif the service is 'api'\nbuild and deploy the {service.repo}/Dockerfile with env:\n  PORT: 8080\n  SERVICE_BASE_URL: {name}/{service.name}\n  this is for the frontend to have a common url for api access\n    eg: /inventory-management/inventory-management-api/**\n    docs: /inventory-management/inventory-management-api/docs\n  frontend can assume other services exist too\n  But must fail gracefully\n    eg: /stock/provider/**\n    docs: /stock/provider/docs\n\nif the service is 'agent'\nbuild and deploy the {service.repo}/Dockerfile\nschedule the deployment to run on {service.tagname} node\n*this means it now has access to service apis through k8s*\n*and host machine capabilities*\n</code></pre>"}]}